1. Os seguintes metodos devem ser criados na classe Heroi ja existente:

void passarDeFase(): metodo que avanca o heroi para a proxima fase se houver, se
estiver na ultima o heroi vence o jogo

void Morrer(): metodo que remove uma vida do heroi e reinicia o nivel caso ele 
ainda tenha vidas ou da game over se ele nao tiver mais vidas

void coletarColecionavel(Colecionavel cColecionavel): Metodo que recebe um objeto da 
classe "Colecionavel" que ainda tem que ser implementada, se o Colecionavel for um coracao o 
Heroi chama o Metodo "ficarEnergizado", se o Colecionavel for um Sol ele chama o metodo passarDeFase()
se nao, nao faz nada e apaga o colecionavel da fase

void ficarEnergizado(): Metodo que eh chamado quando o heroi coleta uma coracao,
muda o seu atributo privado "Energizado" para true por alguns frames

2. Uma classe BlocoInteragivel que extende a classe Elemento:
Essa classe deve possuir os metodos:

##(Nao Precisa Mais)## bool Empurrar(Posicao destino): recebe um Objeto da classe Posicao que
indica para aonde ele deve ser movido e retorna True se a posicao for
valida(nao tiver nada no lugar e nao ser fora do nivel) e False se for
Invalida.

Alem disso, devem ser criados +2 novos metodos na classe Heroi:

bool EmpurrarBloco(BlocoInteragivel bBloco, Posicao pDestino) : Tenta Empurrar
O bloco, chamando a funcao "Empurrar" do bloco passado para ele, para 
uma determinada posicao, retorna o resultado da posicao empurrar

bool DestruirBloco(BlocoInteragivel bBloco) : Destroi o Bloco passado como parametro,
removendo-o do Array de elementos que compoem a fase

3. Uma classe BlocoNaoInteragivel que extende a class Elemento:
Esse classe eh apenas um bloco que nao pode ser empurrado nem destruido e fica parado

4. Uma classe robo inimigo que extende a classe Elemento:
Essa classe deve possuir os seguintes metodos:

Posicao acharProximaPosicao(ArrayList<Elemento> fase) : Metodo recebe como o estado atual da fase e
calcula para onde ele deve se mover retornando a sua proxima posicao (pode ser feito com uma busca em profundidade
ou algo mais simples)

bool MatarHeroi(Heroi hHeroi): Metodo que eh chamado no evento da colisao entre o inimigo e o Heroi , ele recebe o Heroi como
parametro e tenta mata-lo, se o atributo "Energizado" do heroi for False, ele consegue matar o heroi chamando o metodo "Morrer" 
do Heroi que foi passado como parametro. Caso o atributo "Energizado" for true, a funcao retorna falso

void Morrer(): Apaga o Inimigo da fase, eh chamado no momento da colisao se o metodo MatarHeroi retornar falso
o nivel

5. Uma classe Colecionavel que extende Elemento: 
Apenas uma classe colecionavel que devera ter um atributo bool ehCoracao, e um atribudo bool ehSol que podem ser true ou false

6. Uma classe BlocoSeta que extende Elemento:
Essa classe devera ter um atributo Posicao pOrientacao que indica para onde ele aponta e os metodos:

void restringirMovimento(Heroi hHeroi): Esse metodo recebe um objeto da classe heroi e chama o metodo serRestringido(Posicao pPosicao) 
do Heroi passando a sua pOrientacao como parametro

7. Uma classe Coracao que extende Colecionavel:
Essa classe devera possuir o metodo void moverAleatoriamente() que sorteia dentre as 4 casas adjacentes para ele se mover
e devera ter o atributo ehCoracao verdadeiro

8. Devemos fazer outro loop na Classe Controlador no metodo processaTudo() que calcula as colisoes entre os robos inimigos e outros
Elementos que nao permite o robo atravessar esses elementos
